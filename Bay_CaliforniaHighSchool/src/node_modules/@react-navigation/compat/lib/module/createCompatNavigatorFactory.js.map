{"version":3,"sources":["createCompatNavigatorFactory.tsx"],"names":["React","CompatScreen","ScreenPropsContext","createCompatNavigationProp","createCompatNavigatorFactory","createNavigator","isCompat","Error","createCompatNavigator","routeConfig","navigationConfig","Pair","order","defaultNavigationOptions","navigationOptions","parentNavigationOptions","restConfig","routeNames","undefined","Object","keys","Navigator","screenProps","screens","useMemo","map","name","getScreenComponent","initialParams","routeConfigItem","getScreen","params","screen","screenOptions","navigation","route","routeNavigationOptions","screenNavigationOptions","options","navigationOtions","defineProperties","get","router","set"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  NavigationState,\n  PartialState,\n  ParamListBase,\n  TypedNavigator,\n  NavigationProp,\n  RouteProp,\n  EventMapBase,\n} from '@react-navigation/native';\nimport CompatScreen from './CompatScreen';\nimport ScreenPropsContext from './ScreenPropsContext';\nimport createCompatNavigationProp from './createCompatNavigationProp';\nimport { CompatScreenType, CompatRouteConfig } from './types';\n\nexport default function createCompatNavigatorFactory<\n  CreateNavigator extends () => TypedNavigator<\n    ParamListBase,\n    NavigationState,\n    {},\n    EventMapBase,\n    React.ComponentType<any>\n  >\n>(createNavigator: CreateNavigator) {\n  // @ts-ignore\n  if (createNavigator.isCompat) {\n    throw new Error(\n      `The navigator is already in compat mode. You don't need to wrap it in 'createCompatNavigatorFactory'.`\n    );\n  }\n\n  const createCompatNavigator = <\n    NavigationPropType extends NavigationProp<any, any, any, any, any>,\n    ParamList extends ParamListBase = NavigationPropType extends NavigationProp<\n      infer P\n    >\n      ? P\n      : ParamListBase,\n    ScreenOptions extends {} = NavigationPropType extends NavigationProp<\n      any,\n      any,\n      any,\n      infer O\n    >\n      ? O\n      : {},\n    NavigationConfig extends {} = React.ComponentProps<\n      ReturnType<CreateNavigator>['Navigator']\n    >\n  >(\n    routeConfig: CompatRouteConfig<NavigationPropType>,\n    navigationConfig: Partial<Omit<NavigationConfig, 'screenOptions'>> & {\n      order?: Extract<keyof ParamList, string>[];\n      defaultNavigationOptions?: ScreenOptions;\n      navigationOptions?: Record<string, any>;\n    } = {}\n  ) => {\n    const Pair = createNavigator();\n\n    const {\n      order,\n      defaultNavigationOptions,\n      navigationOptions: parentNavigationOptions,\n      ...restConfig\n    } = navigationConfig;\n\n    const routeNames = order !== undefined ? order : Object.keys(routeConfig);\n\n    function Navigator({ screenProps }: { screenProps?: unknown }) {\n      const screens = React.useMemo(\n        () =>\n          routeNames.map(name => {\n            let getScreenComponent: () => CompatScreenType<NavigationPropType>;\n\n            let initialParams;\n\n            const routeConfigItem = routeConfig[name];\n\n            if ('getScreen' in routeConfigItem) {\n              getScreenComponent = routeConfigItem.getScreen;\n              initialParams = routeConfigItem.params;\n            } else if ('screen' in routeConfigItem) {\n              getScreenComponent = () => routeConfigItem.screen;\n              initialParams = routeConfigItem.params;\n            } else {\n              getScreenComponent = () => routeConfigItem;\n            }\n\n            const screenOptions = ({\n              navigation,\n              route,\n            }: {\n              navigation: NavigationPropType;\n              route: RouteProp<ParamList, keyof ParamList> & {\n                state?: NavigationState | PartialState<NavigationState>;\n              };\n            }) => {\n              // @ts-ignore\n              const routeNavigationOptions = routeConfigItem.navigationOptions;\n              const screenNavigationOptions = getScreenComponent()\n                .navigationOptions;\n\n              if (\n                routeNavigationOptions == null &&\n                screenNavigationOptions == null\n              ) {\n                return undefined;\n              }\n\n              const options =\n                typeof routeNavigationOptions === 'function' ||\n                typeof screenNavigationOptions === 'function'\n                  ? {\n                      navigation: createCompatNavigationProp<\n                        NavigationPropType\n                      >(navigation, route, {}),\n                      navigationOptions: defaultNavigationOptions || {},\n                      screenProps,\n                    }\n                  : {};\n\n              return {\n                ...(typeof routeNavigationOptions === 'function'\n                  ? routeNavigationOptions(options)\n                  : routeNavigationOptions),\n                ...(typeof screenNavigationOptions === 'function'\n                  ? (screenNavigationOptions as (o: any) => ScreenOptions)(\n                      options\n                    )\n                  : screenNavigationOptions),\n              } as ScreenOptions;\n            };\n\n            return (\n              <Pair.Screen\n                key={name}\n                name={name}\n                initialParams={initialParams}\n                options={screenOptions}\n              >\n                {({ navigation, route }) => (\n                  <CompatScreen\n                    navigation={navigation}\n                    route={route}\n                    component={getScreenComponent()}\n                  />\n                )}\n              </Pair.Screen>\n            );\n          }),\n        [screenProps]\n      );\n\n      return (\n        <ScreenPropsContext.Provider value={screenProps}>\n          <Pair.Navigator\n            {...(restConfig as NavigationConfig)}\n            screenOptions={defaultNavigationOptions}\n          >\n            {screens}\n          </Pair.Navigator>\n        </ScreenPropsContext.Provider>\n      );\n    }\n\n    Navigator.navigationOtions = parentNavigationOptions;\n\n    return Navigator;\n  };\n\n  Object.defineProperties(createCompatNavigator, {\n    isCompat: {\n      get() {\n        return true;\n      },\n    },\n    router: {\n      get() {\n        throw new Error(\n          \"It's no longer possible to access the router with the 'router' property.\"\n        );\n      },\n      set() {\n        throw new Error(\n          \"It's no longer possible to override the router by assigning the 'router' property.\"\n        );\n      },\n    },\n  });\n\n  return createCompatNavigator;\n}\n"]}